#!/usr/bin/env perl

#
# Copyright (c) 1996 by Randal L. Schwartz
# This program is free software; you can redistribute it
# and/or modify it under the same terms as Perl itself.
#

#
# Anonymous HTTP proxy
# requires LWP 5.04 or later
#

use Data::Dumper;
use Getopt::Long;
use LWP::Debug qw(level); 
use strict;

$ENV{PATH} = join ":", qw(/usr/ucb /bin /usr/bin);
$|++;

my $HOST = `hostname`;
chomp $HOST;

my $PORT = "8008";
my $daemon = 0;
my $debug = 0;
my $quiet = 0;
my $url = 'https://www.open-mpi.org/mtt/submit/index.php';
my $help;

Getopt::Long::Configure("bundling");
Getopt::Long::GetOptions(
    "port|p=i" => \$PORT,
    "host|h=s" => \$HOST,
    "daemon"   => \$daemon,
    "debug|d"  => \$debug,
    "url|u=s"  => \$url,
    "help"     => \$help,
);

# Print help and exit
if ($help) {

    print <<EOT;
 --port|-p     Port that $0 listens on (default: $PORT)
 --host|-h     Specify $0's host (default: $HOST)
 --url|-u      MTT results submission URL (default: $url)
 --daemon      Daemon mode (fork into background)
 --debug|-d    Debug mode
 --help        This message
EOT
    exit;
}

# Stupid emacs mode: '

# Tracing subroutine
sub prefix {
    my $now = localtime;

    join "", map { "[$now] [${$}] $_\n" } split /\n/, join "", @_;
}

$SIG{__WARN__} = sub { warn prefix @_ };
$SIG{__DIE__}  = sub { die prefix @_ };
$SIG{CLD}      = $SIG{CHLD} = sub { wait; };

# Global user agent (for efficiency)
my $AGENT;                      
BEGIN {
    use LWP::UserAgent;
    level('+') if ($debug);

    # Set inheritance
    @MyAgent::ISA = qw(LWP::UserAgent); 

    $AGENT = MyAgent->new;
    $AGENT->agent("mtt-relay/3.0");
    $AGENT->env_proxy;
}

# Redirects should pass through
sub MyAgent::redirect_ok { 0 } 


# MAIN
{
    use HTTP::Daemon;

    # if ($shutdown) {
    #     &send_shutdown_command();
    #     exit;
    # }

    my $master = new HTTP::Daemon
            LocalAddr => $HOST, LocalPort => $PORT or 
            die "Problem creating an HTTP::Daemon: $!";
    print "Set your proxy to <URL:" . $master->url . ">\n";
    my $slave;

    if ($daemon) {
        my $pid = fork();
        if($pid) {
            print "# Daemon Parent exiting\n";
            exit 0;
        } else {
            print "# Daemon Child process continuing\n";
        }
    }

    while (1) {
        while ($slave = $master->accept) {
            &handle_connection($slave);
        }
    }

    exit 0;
}
# END MAIN

sub handle_connection {

    # HTTP::Daemon::ClientConn
    my $connection = shift; 

    my $pid = fork;

    # Spawn OK, and I'm the parent
    if ($pid) {
        close $connection;
        return;
    }

    # Spawn failed, or I'm a good child
    my $request = $connection->get_request;
    if (defined($request)) {
        my $response = &fetch_request($request);
        $connection->send_response($response);
        close $connection;
    }

    # Exit if I'm a good child with a good parent
    exit 0 if defined $pid;       
}

sub fetch_request {

    # HTTP::Request
    my $request = shift; 

    use HTTP::Response;

    my $uri = $request->uri;

    print "Fetching $uri\n";

    #
    # X: This validation errors out with bizarre "Missing base argument"
    #
    # if ($request->scheme !~ /http|gopher|ftp/) {
    #     my $res = HTTP::Response->new(403, "Forbidden");
    #     $res->content("bad scheme: @{[$uri->scheme]}\n");
    #     return $res;
    # } elsif (not $uri->rel->netloc) {
    #     my $res = HTTP::Response->new(403, "Forbidden");
    #     $res->content("relative URL not permitted\n");
    #     return $res;
    # } else {
    #     &fetch_validated_request($request);
    # }

    &fetch_validated_request($request);
}

# Shutdown this daemon in an organized fashion
# sub send_shutdown_command {
#     my %headers = { 'shutdown' => 1 };
#     my $request = HTTP::Request->new('POST', "http://$HOST:$PORT", bless \%headers);
#     $AGENT->request($request);
# }

sub fetch_validated_request { 

    # HTTP::Request
    my $request = shift;  
    my $response;

    $request->remove_header(qw(User-Agent From Referer Cookie Host));

    # Only send to www.open-mpi.org submit script
    $request->uri($url);

    $response = $AGENT->request($request);
    $response->remove_header(qw(Set-Cookie));

    return $response;
}
